diff -urN ORIG/SoftwareWire/.git/config NEW/SoftwareWire/.git/config
--- ORIG/SoftwareWire/.git/config	2022-07-19 12:41:55.552816664 +0200
+++ NEW/SoftwareWire/.git/config	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
-[core]
-	repositoryformatversion = 0
-	filemode = true
-	bare = false
-	logallrefupdates = true
-[remote "origin"]
-	url = https://github.com/Testato/SoftwareWire
-	fetch = +refs/heads/*:refs/remotes/origin/*
-[branch "master"]
-	remote = origin
-	merge = refs/heads/master
diff -urN ORIG/SoftwareWire/.git/description NEW/SoftwareWire/.git/description
--- ORIG/SoftwareWire/.git/description	2022-07-19 12:41:54.728826154 +0200
+++ NEW/SoftwareWire/.git/description	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-Unnamed repository; edit this file 'description' to name the repository.
diff -urN ORIG/SoftwareWire/.git/HEAD NEW/SoftwareWire/.git/HEAD
--- ORIG/SoftwareWire/.git/HEAD	2022-07-19 12:41:55.548816710 +0200
+++ NEW/SoftwareWire/.git/HEAD	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-ref: refs/heads/master
diff -urN ORIG/SoftwareWire/.git/hooks/applypatch-msg.sample NEW/SoftwareWire/.git/hooks/applypatch-msg.sample
--- ORIG/SoftwareWire/.git/hooks/applypatch-msg.sample	2022-07-19 12:41:54.728826154 +0200
+++ NEW/SoftwareWire/.git/hooks/applypatch-msg.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,15 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message taken by
-# applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.  The hook is
-# allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "applypatch-msg".
-
-. git-sh-setup
-commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
-test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
-:
diff -urN ORIG/SoftwareWire/.git/hooks/commit-msg.sample NEW/SoftwareWire/.git/hooks/commit-msg.sample
--- ORIG/SoftwareWire/.git/hooks/commit-msg.sample	2022-07-19 12:41:54.728826154 +0200
+++ NEW/SoftwareWire/.git/hooks/commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message.
-# Called by "git commit" with one argument, the name of the file
-# that has the commit message.  The hook should exit with non-zero
-# status after issuing an appropriate message if it wants to stop the
-# commit.  The hook is allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "commit-msg".
-
-# Uncomment the below to add a Signed-off-by line to the message.
-# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
-# hook is more suited to it.
-#
-# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
-
-# This example catches duplicate Signed-off-by lines.
-
-test "" = "$(grep '^Signed-off-by: ' "$1" |
-	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
-	echo >&2 Duplicate Signed-off-by lines.
-	exit 1
-}
diff -urN ORIG/SoftwareWire/.git/hooks/fsmonitor-watchman.sample NEW/SoftwareWire/.git/hooks/fsmonitor-watchman.sample
--- ORIG/SoftwareWire/.git/hooks/fsmonitor-watchman.sample	2022-07-19 12:41:54.728826154 +0200
+++ NEW/SoftwareWire/.git/hooks/fsmonitor-watchman.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,173 +0,0 @@
-#!/usr/bin/perl
-
-use strict;
-use warnings;
-use IPC::Open2;
-
-# An example hook script to integrate Watchman
-# (https://facebook.github.io/watchman/) with git to speed up detecting
-# new and modified files.
-#
-# The hook is passed a version (currently 2) and last update token
-# formatted as a string and outputs to stdout a new update token and
-# all files that have been modified since the update token. Paths must
-# be relative to the root of the working tree and separated by a single NUL.
-#
-# To enable this hook, rename this file to "query-watchman" and set
-# 'git config core.fsmonitor .git/hooks/query-watchman'
-#
-my ($version, $last_update_token) = @ARGV;
-
-# Uncomment for debugging
-# print STDERR "$0 $version $last_update_token\n";
-
-# Check the hook interface version
-if ($version ne 2) {
-	die "Unsupported query-fsmonitor hook version '$version'.\n" .
-	    "Falling back to scanning...\n";
-}
-
-my $git_work_tree = get_working_dir();
-
-my $retry = 1;
-
-my $json_pkg;
-eval {
-	require JSON::XS;
-	$json_pkg = "JSON::XS";
-	1;
-} or do {
-	require JSON::PP;
-	$json_pkg = "JSON::PP";
-};
-
-launch_watchman();
-
-sub launch_watchman {
-	my $o = watchman_query();
-	if (is_work_tree_watched($o)) {
-		output_result($o->{clock}, @{$o->{files}});
-	}
-}
-
-sub output_result {
-	my ($clockid, @files) = @_;
-
-	# Uncomment for debugging watchman output
-	# open (my $fh, ">", ".git/watchman-output.out");
-	# binmode $fh, ":utf8";
-	# print $fh "$clockid\n@files\n";
-	# close $fh;
-
-	binmode STDOUT, ":utf8";
-	print $clockid;
-	print "\0";
-	local $, = "\0";
-	print @files;
-}
-
-sub watchman_clock {
-	my $response = qx/watchman clock "$git_work_tree"/;
-	die "Failed to get clock id on '$git_work_tree'.\n" .
-		"Falling back to scanning...\n" if $? != 0;
-
-	return $json_pkg->new->utf8->decode($response);
-}
-
-sub watchman_query {
-	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
-	or die "open2() failed: $!\n" .
-	"Falling back to scanning...\n";
-
-	# In the query expression below we're asking for names of files that
-	# changed since $last_update_token but not from the .git folder.
-	#
-	# To accomplish this, we're using the "since" generator to use the
-	# recency index to select candidate nodes and "fields" to limit the
-	# output to file names only. Then we're using the "expression" term to
-	# further constrain the results.
-	if (substr($last_update_token, 0, 1) eq "c") {
-		$last_update_token = "\"$last_update_token\"";
-	}
-	my $query = <<"	END";
-		["query", "$git_work_tree", {
-			"since": $last_update_token,
-			"fields": ["name"],
-			"expression": ["not", ["dirname", ".git"]]
-		}]
-	END
-
-	# Uncomment for debugging the watchman query
-	# open (my $fh, ">", ".git/watchman-query.json");
-	# print $fh $query;
-	# close $fh;
-
-	print CHLD_IN $query;
-	close CHLD_IN;
-	my $response = do {local $/; <CHLD_OUT>};
-
-	# Uncomment for debugging the watch response
-	# open ($fh, ">", ".git/watchman-response.json");
-	# print $fh $response;
-	# close $fh;
-
-	die "Watchman: command returned no output.\n" .
-	"Falling back to scanning...\n" if $response eq "";
-	die "Watchman: command returned invalid output: $response\n" .
-	"Falling back to scanning...\n" unless $response =~ /^\{/;
-
-	return $json_pkg->new->utf8->decode($response);
-}
-
-sub is_work_tree_watched {
-	my ($output) = @_;
-	my $error = $output->{error};
-	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
-		$retry--;
-		my $response = qx/watchman watch "$git_work_tree"/;
-		die "Failed to make watchman watch '$git_work_tree'.\n" .
-		    "Falling back to scanning...\n" if $? != 0;
-		$output = $json_pkg->new->utf8->decode($response);
-		$error = $output->{error};
-		die "Watchman: $error.\n" .
-		"Falling back to scanning...\n" if $error;
-
-		# Uncomment for debugging watchman output
-		# open (my $fh, ">", ".git/watchman-output.out");
-		# close $fh;
-
-		# Watchman will always return all files on the first query so
-		# return the fast "everything is dirty" flag to git and do the
-		# Watchman query just to get it over with now so we won't pay
-		# the cost in git to look up each individual file.
-		my $o = watchman_clock();
-		$error = $output->{error};
-
-		die "Watchman: $error.\n" .
-		"Falling back to scanning...\n" if $error;
-
-		output_result($o->{clock}, ("/"));
-		$last_update_token = $o->{clock};
-
-		eval { launch_watchman() };
-		return 0;
-	}
-
-	die "Watchman: $error.\n" .
-	"Falling back to scanning...\n" if $error;
-
-	return 1;
-}
-
-sub get_working_dir {
-	my $working_dir;
-	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
-		$working_dir = Win32::GetCwd();
-		$working_dir =~ tr/\\/\//;
-	} else {
-		require Cwd;
-		$working_dir = Cwd::cwd();
-	}
-
-	return $working_dir;
-}
diff -urN ORIG/SoftwareWire/.git/hooks/post-update.sample NEW/SoftwareWire/.git/hooks/post-update.sample
--- ORIG/SoftwareWire/.git/hooks/post-update.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/post-update.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,8 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare a packed repository for use over
-# dumb transports.
-#
-# To enable this hook, rename this file to "post-update".
-
-exec git update-server-info
diff -urN ORIG/SoftwareWire/.git/hooks/pre-applypatch.sample NEW/SoftwareWire/.git/hooks/pre-applypatch.sample
--- ORIG/SoftwareWire/.git/hooks/pre-applypatch.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/pre-applypatch.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,14 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed
-# by applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-applypatch".
-
-. git-sh-setup
-precommit="$(git rev-parse --git-path hooks/pre-commit)"
-test -x "$precommit" && exec "$precommit" ${1+"$@"}
-:
diff -urN ORIG/SoftwareWire/.git/hooks/pre-commit.sample NEW/SoftwareWire/.git/hooks/pre-commit.sample
--- ORIG/SoftwareWire/.git/hooks/pre-commit.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/pre-commit.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,49 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git commit" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message if
-# it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-commit".
-
-if git rev-parse --verify HEAD >/dev/null 2>&1
-then
-	against=HEAD
-else
-	# Initial commit: diff against an empty tree object
-	against=$(git hash-object -t tree /dev/null)
-fi
-
-# If you want to allow non-ASCII filenames set this variable to true.
-allownonascii=$(git config --type=bool hooks.allownonascii)
-
-# Redirect output to stderr.
-exec 1>&2
-
-# Cross platform projects tend to avoid non-ASCII filenames; prevent
-# them from being added to the repository. We exploit the fact that the
-# printable range starts at the space character and ends with tilde.
-if [ "$allownonascii" != "true" ] &&
-	# Note that the use of brackets around a tr range is ok here, (it's
-	# even required, for portability to Solaris 10's /usr/bin/tr), since
-	# the square bracket bytes happen to fall in the designated range.
-	test $(git diff --cached --name-only --diff-filter=A -z $against |
-	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
-then
-	cat <<\EOF
-Error: Attempt to add a non-ASCII file name.
-
-This can cause problems if you want to work with people on other platforms.
-
-To be portable it is advisable to rename the file.
-
-If you know what you are doing you can disable this check using:
-
-  git config hooks.allownonascii true
-EOF
-	exit 1
-fi
-
-# If there are whitespace errors, print the offending file names and fail.
-exec git diff-index --check --cached $against --
diff -urN ORIG/SoftwareWire/.git/hooks/pre-merge-commit.sample NEW/SoftwareWire/.git/hooks/pre-merge-commit.sample
--- ORIG/SoftwareWire/.git/hooks/pre-merge-commit.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/pre-merge-commit.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,13 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git merge" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message to
-# stderr if it wants to stop the merge commit.
-#
-# To enable this hook, rename this file to "pre-merge-commit".
-
-. git-sh-setup
-test -x "$GIT_DIR/hooks/pre-commit" &&
-        exec "$GIT_DIR/hooks/pre-commit"
-:
diff -urN ORIG/SoftwareWire/.git/hooks/prepare-commit-msg.sample NEW/SoftwareWire/.git/hooks/prepare-commit-msg.sample
--- ORIG/SoftwareWire/.git/hooks/prepare-commit-msg.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/prepare-commit-msg.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,42 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare the commit log message.
-# Called by "git commit" with the name of the file that has the
-# commit message, followed by the description of the commit
-# message's source.  The hook's purpose is to edit the commit
-# message file.  If the hook fails with a non-zero status,
-# the commit is aborted.
-#
-# To enable this hook, rename this file to "prepare-commit-msg".
-
-# This hook includes three examples. The first one removes the
-# "# Please enter the commit message..." help message.
-#
-# The second includes the output of "git diff --name-status -r"
-# into the message, just before the "git status" output.  It is
-# commented because it doesn't cope with --amend or with squashed
-# commits.
-#
-# The third example adds a Signed-off-by line to the message, that can
-# still be edited.  This is rarely a good idea.
-
-COMMIT_MSG_FILE=$1
-COMMIT_SOURCE=$2
-SHA1=$3
-
-/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
-
-# case "$COMMIT_SOURCE,$SHA1" in
-#  ,|template,)
-#    /usr/bin/perl -i.bak -pe '
-#       print "\n" . `git diff --cached --name-status -r`
-# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
-#  *) ;;
-# esac
-
-# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
-# if test -z "$COMMIT_SOURCE"
-# then
-#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
-# fi
diff -urN ORIG/SoftwareWire/.git/hooks/pre-push.sample NEW/SoftwareWire/.git/hooks/pre-push.sample
--- ORIG/SoftwareWire/.git/hooks/pre-push.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/pre-push.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,53 +0,0 @@
-#!/bin/sh
-
-# An example hook script to verify what is about to be pushed.  Called by "git
-# push" after it has checked the remote status, but before anything has been
-# pushed.  If this script exits with a non-zero status nothing will be pushed.
-#
-# This hook is called with the following parameters:
-#
-# $1 -- Name of the remote to which the push is being done
-# $2 -- URL to which the push is being done
-#
-# If pushing without using a named remote those arguments will be equal.
-#
-# Information about the commits which are being pushed is supplied as lines to
-# the standard input in the form:
-#
-#   <local ref> <local oid> <remote ref> <remote oid>
-#
-# This sample shows how to prevent push of commits where the log message starts
-# with "WIP" (work in progress).
-
-remote="$1"
-url="$2"
-
-zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
-
-while read local_ref local_oid remote_ref remote_oid
-do
-	if test "$local_oid" = "$zero"
-	then
-		# Handle delete
-		:
-	else
-		if test "$remote_oid" = "$zero"
-		then
-			# New branch, examine all commits
-			range="$local_oid"
-		else
-			# Update to existing branch, examine new commits
-			range="$remote_oid..$local_oid"
-		fi
-
-		# Check for WIP commit
-		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
-		if test -n "$commit"
-		then
-			echo >&2 "Found WIP commit in $local_ref, not pushing"
-			exit 1
-		fi
-	fi
-done
-
-exit 0
diff -urN ORIG/SoftwareWire/.git/hooks/pre-rebase.sample NEW/SoftwareWire/.git/hooks/pre-rebase.sample
--- ORIG/SoftwareWire/.git/hooks/pre-rebase.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/pre-rebase.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,169 +0,0 @@
-#!/bin/sh
-#
-# Copyright (c) 2006, 2008 Junio C Hamano
-#
-# The "pre-rebase" hook is run just before "git rebase" starts doing
-# its job, and can prevent the command from running by exiting with
-# non-zero status.
-#
-# The hook is called with the following parameters:
-#
-# $1 -- the upstream the series was forked from.
-# $2 -- the branch being rebased (or empty when rebasing the current branch).
-#
-# This sample shows how to prevent topic branches that are already
-# merged to 'next' branch from getting rebased, because allowing it
-# would result in rebasing already published history.
-
-publish=next
-basebranch="$1"
-if test "$#" = 2
-then
-	topic="refs/heads/$2"
-else
-	topic=`git symbolic-ref HEAD` ||
-	exit 0 ;# we do not interrupt rebasing detached HEAD
-fi
-
-case "$topic" in
-refs/heads/??/*)
-	;;
-*)
-	exit 0 ;# we do not interrupt others.
-	;;
-esac
-
-# Now we are dealing with a topic branch being rebased
-# on top of master.  Is it OK to rebase it?
-
-# Does the topic really exist?
-git show-ref -q "$topic" || {
-	echo >&2 "No such branch $topic"
-	exit 1
-}
-
-# Is topic fully merged to master?
-not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
-if test -z "$not_in_master"
-then
-	echo >&2 "$topic is fully merged to master; better remove it."
-	exit 1 ;# we could allow it, but there is no point.
-fi
-
-# Is topic ever merged to next?  If so you should not be rebasing it.
-only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
-only_next_2=`git rev-list ^master           ${publish} | sort`
-if test "$only_next_1" = "$only_next_2"
-then
-	not_in_topic=`git rev-list "^$topic" master`
-	if test -z "$not_in_topic"
-	then
-		echo >&2 "$topic is already up to date with master"
-		exit 1 ;# we could allow it, but there is no point.
-	else
-		exit 0
-	fi
-else
-	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
-	/usr/bin/perl -e '
-		my $topic = $ARGV[0];
-		my $msg = "* $topic has commits already merged to public branch:\n";
-		my (%not_in_next) = map {
-			/^([0-9a-f]+) /;
-			($1 => 1);
-		} split(/\n/, $ARGV[1]);
-		for my $elem (map {
-				/^([0-9a-f]+) (.*)$/;
-				[$1 => $2];
-			} split(/\n/, $ARGV[2])) {
-			if (!exists $not_in_next{$elem->[0]}) {
-				if ($msg) {
-					print STDERR $msg;
-					undef $msg;
-				}
-				print STDERR " $elem->[1]\n";
-			}
-		}
-	' "$topic" "$not_in_next" "$not_in_master"
-	exit 1
-fi
-
-<<\DOC_END
-
-This sample hook safeguards topic branches that have been
-published from being rewound.
-
-The workflow assumed here is:
-
- * Once a topic branch forks from "master", "master" is never
-   merged into it again (either directly or indirectly).
-
- * Once a topic branch is fully cooked and merged into "master",
-   it is deleted.  If you need to build on top of it to correct
-   earlier mistakes, a new topic branch is created by forking at
-   the tip of the "master".  This is not strictly necessary, but
-   it makes it easier to keep your history simple.
-
- * Whenever you need to test or publish your changes to topic
-   branches, merge them into "next" branch.
-
-The script, being an example, hardcodes the publish branch name
-to be "next", but it is trivial to make it configurable via
-$GIT_DIR/config mechanism.
-
-With this workflow, you would want to know:
-
-(1) ... if a topic branch has ever been merged to "next".  Young
-    topic branches can have stupid mistakes you would rather
-    clean up before publishing, and things that have not been
-    merged into other branches can be easily rebased without
-    affecting other people.  But once it is published, you would
-    not want to rewind it.
-
-(2) ... if a topic branch has been fully merged to "master".
-    Then you can delete it.  More importantly, you should not
-    build on top of it -- other people may already want to
-    change things related to the topic as patches against your
-    "master", so if you need further changes, it is better to
-    fork the topic (perhaps with the same name) afresh from the
-    tip of "master".
-
-Let's look at this example:
-
-		   o---o---o---o---o---o---o---o---o---o "next"
-		  /       /           /           /
-		 /   a---a---b A     /           /
-		/   /               /           /
-	       /   /   c---c---c---c B         /
-	      /   /   /             \         /
-	     /   /   /   b---b C     \       /
-	    /   /   /   /             \     /
-    ---o---o---o---o---o---o---o---o---o---o---o "master"
-
-
-A, B and C are topic branches.
-
- * A has one fix since it was merged up to "next".
-
- * B has finished.  It has been fully merged up to "master" and "next",
-   and is ready to be deleted.
-
- * C has not merged to "next" at all.
-
-We would want to allow C to be rebased, refuse A, and encourage
-B to be deleted.
-
-To compute (1):
-
-	git rev-list ^master ^topic next
-	git rev-list ^master        next
-
-	if these match, topic has not merged in next at all.
-
-To compute (2):
-
-	git rev-list master..topic
-
-	if this is empty, it is fully merged to "master".
-
-DOC_END
diff -urN ORIG/SoftwareWire/.git/hooks/pre-receive.sample NEW/SoftwareWire/.git/hooks/pre-receive.sample
--- ORIG/SoftwareWire/.git/hooks/pre-receive.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/pre-receive.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to make use of push options.
-# The example simply echoes all push options that start with 'echoback='
-# and rejects all pushes when the "reject" push option is used.
-#
-# To enable this hook, rename this file to "pre-receive".
-
-if test -n "$GIT_PUSH_OPTION_COUNT"
-then
-	i=0
-	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
-	do
-		eval "value=\$GIT_PUSH_OPTION_$i"
-		case "$value" in
-		echoback=*)
-			echo "echo from the pre-receive-hook: ${value#*=}" >&2
-			;;
-		reject)
-			exit 1
-		esac
-		i=$((i + 1))
-	done
-fi
diff -urN ORIG/SoftwareWire/.git/hooks/push-to-checkout.sample NEW/SoftwareWire/.git/hooks/push-to-checkout.sample
--- ORIG/SoftwareWire/.git/hooks/push-to-checkout.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/push-to-checkout.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,78 +0,0 @@
-#!/bin/sh
-
-# An example hook script to update a checked-out tree on a git push.
-#
-# This hook is invoked by git-receive-pack(1) when it reacts to git
-# push and updates reference(s) in its repository, and when the push
-# tries to update the branch that is currently checked out and the
-# receive.denyCurrentBranch configuration variable is set to
-# updateInstead.
-#
-# By default, such a push is refused if the working tree and the index
-# of the remote repository has any difference from the currently
-# checked out commit; when both the working tree and the index match
-# the current commit, they are updated to match the newly pushed tip
-# of the branch. This hook is to be used to override the default
-# behaviour; however the code below reimplements the default behaviour
-# as a starting point for convenient modification.
-#
-# The hook receives the commit with which the tip of the current
-# branch is going to be updated:
-commit=$1
-
-# It can exit with a non-zero status to refuse the push (when it does
-# so, it must not modify the index or the working tree).
-die () {
-	echo >&2 "$*"
-	exit 1
-}
-
-# Or it can make any necessary changes to the working tree and to the
-# index to bring them to the desired state when the tip of the current
-# branch is updated to the new commit, and exit with a zero status.
-#
-# For example, the hook can simply run git read-tree -u -m HEAD "$1"
-# in order to emulate git fetch that is run in the reverse direction
-# with git push, as the two-tree form of git read-tree -u -m is
-# essentially the same as git switch or git checkout that switches
-# branches while keeping the local changes in the working tree that do
-# not interfere with the difference between the branches.
-
-# The below is a more-or-less exact translation to shell of the C code
-# for the default behaviour for git's push-to-checkout hook defined in
-# the push_to_deploy() function in builtin/receive-pack.c.
-#
-# Note that the hook will be executed from the repository directory,
-# not from the working tree, so if you want to perform operations on
-# the working tree, you will have to adapt your code accordingly, e.g.
-# by adding "cd .." or using relative paths.
-
-if ! git update-index -q --ignore-submodules --refresh
-then
-	die "Up-to-date check failed"
-fi
-
-if ! git diff-files --quiet --ignore-submodules --
-then
-	die "Working directory has unstaged changes"
-fi
-
-# This is a rough translation of:
-#
-#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
-if git cat-file -e HEAD 2>/dev/null
-then
-	head=HEAD
-else
-	head=$(git hash-object -t tree --stdin </dev/null)
-fi
-
-if ! git diff-index --quiet --cached --ignore-submodules $head --
-then
-	die "Working directory has staged changes"
-fi
-
-if ! git read-tree -u -m "$commit"
-then
-	die "Could not update working tree to new HEAD"
-fi
diff -urN ORIG/SoftwareWire/.git/hooks/update.sample NEW/SoftwareWire/.git/hooks/update.sample
--- ORIG/SoftwareWire/.git/hooks/update.sample	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/hooks/update.sample	1970-01-01 01:00:00.000000000 +0100
@@ -1,128 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to block unannotated tags from entering.
-# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
-#
-# To enable this hook, rename this file to "update".
-#
-# Config
-# ------
-# hooks.allowunannotated
-#   This boolean sets whether unannotated tags will be allowed into the
-#   repository.  By default they won't be.
-# hooks.allowdeletetag
-#   This boolean sets whether deleting tags will be allowed in the
-#   repository.  By default they won't be.
-# hooks.allowmodifytag
-#   This boolean sets whether a tag may be modified after creation. By default
-#   it won't be.
-# hooks.allowdeletebranch
-#   This boolean sets whether deleting branches will be allowed in the
-#   repository.  By default they won't be.
-# hooks.denycreatebranch
-#   This boolean sets whether remotely creating branches will be denied
-#   in the repository.  By default this is allowed.
-#
-
-# --- Command line
-refname="$1"
-oldrev="$2"
-newrev="$3"
-
-# --- Safety check
-if [ -z "$GIT_DIR" ]; then
-	echo "Don't run this script from the command line." >&2
-	echo " (if you want, you could supply GIT_DIR then run" >&2
-	echo "  $0 <ref> <oldrev> <newrev>)" >&2
-	exit 1
-fi
-
-if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
-	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
-	exit 1
-fi
-
-# --- Config
-allowunannotated=$(git config --type=bool hooks.allowunannotated)
-allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
-denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
-allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
-allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
-
-# check for no description
-projectdesc=$(sed -e '1q' "$GIT_DIR/description")
-case "$projectdesc" in
-"Unnamed repository"* | "")
-	echo "*** Project description file hasn't been set" >&2
-	exit 1
-	;;
-esac
-
-# --- Check types
-# if $newrev is 0000...0000, it's a commit to delete a ref.
-zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
-if [ "$newrev" = "$zero" ]; then
-	newrev_type=delete
-else
-	newrev_type=$(git cat-file -t $newrev)
-fi
-
-case "$refname","$newrev_type" in
-	refs/tags/*,commit)
-		# un-annotated tag
-		short_refname=${refname##refs/tags/}
-		if [ "$allowunannotated" != "true" ]; then
-			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
-			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,delete)
-		# delete tag
-		if [ "$allowdeletetag" != "true" ]; then
-			echo "*** Deleting a tag is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,tag)
-		# annotated tag
-		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
-		then
-			echo "*** Tag '$refname' already exists." >&2
-			echo "*** Modifying a tag is not allowed in this repository." >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,commit)
-		# branch
-		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
-			echo "*** Creating a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,delete)
-		# delete branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/remotes/*,commit)
-		# tracking branch
-		;;
-	refs/remotes/*,delete)
-		# delete tracking branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	*)
-		# Anything else (is there anything else?)
-		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
-		exit 1
-		;;
-esac
-
-# --- Finished
-exit 0
Binary files ORIG/SoftwareWire/.git/index and NEW/SoftwareWire/.git/index differ
diff -urN ORIG/SoftwareWire/.git/info/exclude NEW/SoftwareWire/.git/info/exclude
--- ORIG/SoftwareWire/.git/info/exclude	2022-07-19 12:41:54.732826108 +0200
+++ NEW/SoftwareWire/.git/info/exclude	1970-01-01 01:00:00.000000000 +0100
@@ -1,6 +0,0 @@
-# git ls-files --others --exclude-from=.git/info/exclude
-# Lines that start with '#' are comments.
-# For a project mostly in C, the following would be a good set of
-# exclude patterns (uncomment them if you want to use them):
-# *.[oa]
-# *~
diff -urN ORIG/SoftwareWire/.git/logs/HEAD NEW/SoftwareWire/.git/logs/HEAD
--- ORIG/SoftwareWire/.git/logs/HEAD	2022-07-19 12:41:55.552816664 +0200
+++ NEW/SoftwareWire/.git/logs/HEAD	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 2774c3a6452611bd8d68114036fd3fb24b99a5d6 Koen De Vleeschauwer <kdv@kdvelectronics.eu> 1658227315 +0200	clone: from https://github.com/Testato/SoftwareWire
diff -urN ORIG/SoftwareWire/.git/logs/refs/heads/master NEW/SoftwareWire/.git/logs/refs/heads/master
--- ORIG/SoftwareWire/.git/logs/refs/heads/master	2022-07-19 12:41:55.552816664 +0200
+++ NEW/SoftwareWire/.git/logs/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 2774c3a6452611bd8d68114036fd3fb24b99a5d6 Koen De Vleeschauwer <kdv@kdvelectronics.eu> 1658227315 +0200	clone: from https://github.com/Testato/SoftwareWire
diff -urN ORIG/SoftwareWire/.git/logs/refs/remotes/origin/HEAD NEW/SoftwareWire/.git/logs/refs/remotes/origin/HEAD
--- ORIG/SoftwareWire/.git/logs/refs/remotes/origin/HEAD	2022-07-19 12:41:55.548816710 +0200
+++ NEW/SoftwareWire/.git/logs/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 2774c3a6452611bd8d68114036fd3fb24b99a5d6 Koen De Vleeschauwer <kdv@kdvelectronics.eu> 1658227315 +0200	clone: from https://github.com/Testato/SoftwareWire
Binary files ORIG/SoftwareWire/.git/objects/pack/pack-671c5417e76eb18792326843dc15aa31c9d80387.idx and NEW/SoftwareWire/.git/objects/pack/pack-671c5417e76eb18792326843dc15aa31c9d80387.idx differ
Binary files ORIG/SoftwareWire/.git/objects/pack/pack-671c5417e76eb18792326843dc15aa31c9d80387.pack and NEW/SoftwareWire/.git/objects/pack/pack-671c5417e76eb18792326843dc15aa31c9d80387.pack differ
diff -urN ORIG/SoftwareWire/.git/packed-refs NEW/SoftwareWire/.git/packed-refs
--- ORIG/SoftwareWire/.git/packed-refs	2022-07-19 12:41:55.548816710 +0200
+++ NEW/SoftwareWire/.git/packed-refs	1970-01-01 01:00:00.000000000 +0100
@@ -1,9 +0,0 @@
-# pack-refs with: peeled fully-peeled sorted 
-2774c3a6452611bd8d68114036fd3fb24b99a5d6 refs/remotes/origin/master
-00e72427de6ddc90e16e3044591a96e4a740770d refs/tags/1.3.2
-^122e5368c20ffd50c78724e27c70cfdf5010bd80
-0f53767b17d673423704af01b0fb22c338f1060d refs/tags/v1.4.0
-618f0f32e1b0517e1341d20b79da6191d0b5d9ec refs/tags/v1.4.1
-479df9ede74ab0bc8f0c1a414c0dd94d15d6993e refs/tags/v1.5.0
-5d9ef025d8f391a13a9536e98d09bcfbf5d09c8b refs/tags/v1.5.1
-2774c3a6452611bd8d68114036fd3fb24b99a5d6 refs/tags/v1.6.0
diff -urN ORIG/SoftwareWire/.git/refs/heads/master NEW/SoftwareWire/.git/refs/heads/master
--- ORIG/SoftwareWire/.git/refs/heads/master	2022-07-19 12:41:55.548816710 +0200
+++ NEW/SoftwareWire/.git/refs/heads/master	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-2774c3a6452611bd8d68114036fd3fb24b99a5d6
diff -urN ORIG/SoftwareWire/.git/refs/remotes/origin/HEAD NEW/SoftwareWire/.git/refs/remotes/origin/HEAD
--- ORIG/SoftwareWire/.git/refs/remotes/origin/HEAD	2022-07-19 12:41:55.548816710 +0200
+++ NEW/SoftwareWire/.git/refs/remotes/origin/HEAD	1970-01-01 01:00:00.000000000 +0100
@@ -1 +0,0 @@
-ref: refs/remotes/origin/master
diff -urN ORIG/SoftwareWire/readme.md NEW/SoftwareWire/readme.md
--- ORIG/SoftwareWire/readme.md	2022-07-19 12:41:55.556816618 +0200
+++ NEW/SoftwareWire/readme.md	2022-07-19 12:40:29.000000000 +0200
@@ -6,8 +6,34 @@
 The clock pulse stretching is implemented, so the Slave can be another Arduino board.  
 See the Small_example.ino how to use it. Include the library, and create a SoftwareWire object with the sda and scl pin. After that is should be just like the real Wire library.  
 
+### SeekFree/MM32
+
+SoftwareWire has been modified for Seekfree/MM32, but there is a requirement:
+sda and scl pins should both belong to the same group of 8 pins. These groups are:
+
+- PA0 to PA7
+- PA8 to PA15
+- PB0 to PB7
+- PB8 to PB15
+- PC0 to PC7
+- PC8 to PC15
+- PD0 to PD7
+- PD8 to PD15
+
+These pins work:
+
+- SoftwareWire Wire(PB7, PB6);
+- SoftwareWire Wire(PA4, PA3);
+
+This choice of pins does not work:
+
+- SoftwareWire Wire(PA4, PB8); // not same group of 8 pins
+- SoftwareWire Wire(PB7, PB8); // not same group of 8 pins
+
 ### Version history
 
+- Modified for SeekFree/mm32xx
+
 Ver 1.6.0
 - Remove virtual on destructor - by @bxparks
 - Remove inheritance from TwoWire - by @bxparks
diff -urN ORIG/SoftwareWire/SoftwareWire.cpp NEW/SoftwareWire/SoftwareWire.cpp
--- ORIG/SoftwareWire/SoftwareWire.cpp	2022-07-19 12:41:55.556816618 +0200
+++ NEW/SoftwareWire/SoftwareWire.cpp	2022-07-19 14:09:44.000000000 +0200
@@ -61,44 +61,132 @@
 
 #include "SoftwareWire.h"
 
+/* mm32: 
+   - direct gpio register access for speed
+   assumption:
+   - external pullups used
+   - scl and sda same gpio bank
+   - scl and sda same crl/crh register
+ */
+
+
+
+extern "C" {
+#include "zf_gpio.h"
+}
 
 // Sets SDA low and drives output.
-// The SDA may not be HIGH output, so first the output register is cleared
-// (clearing internal pullup resistor), after that the SDA is set as output.
+
 #define i2c_sda_lo()              \
-  *_sdaPortReg &= ~_sdaBitMask;   \
-  *_sdaDirReg  |=  _sdaBitMask;
+{ \
+  if (_scl_val) *_i2c_cr = _cr_sda_lo_scl_hi; \
+  else *_i2c_cr = _cr_sda_lo_scl_lo; \
+  _sda_val = false; \
+}
 
 
 // sets SCL low and drives output.
-// The SCL may not be HIGH output, so first the output register is cleared
-// (clearing internal pullup resistor), after that the SCL is set as output.
 #define i2c_scl_lo()              \
-  *_sclPortReg &= ~_sclBitMask;   \
-  *_sclDirReg  |=  _sclBitMask;
+{ \
+  if (_sda_val) *_i2c_cr = _cr_sda_hi_scl_lo; \
+  else *_i2c_cr = _cr_sda_lo_scl_lo; \
+  _scl_val = false; \
+}
 
 
-// Set SDA high and to input (releases pin) (i.e. change to input, turn on pullup).
-// The SDA may not become HIGH output. Therefore the pin is first set to input,
-// after that, a pullup resistor is switched on if needed.
+// Set SDA high and to input (releases pin)
 #define i2c_sda_hi()              \
-  *_sdaDirReg &= ~_sdaBitMask;    \
-  if(_pullups) { *_sdaPortReg |= _sdaBitMask; }
+{ \
+  if (_scl_val) *_i2c_cr = _cr_sda_hi_scl_hi; \
+  else *_i2c_cr = _cr_sda_hi_scl_lo; \
+  _sda_val = true; \
+}
 
 
-// set SCL high and to input (releases pin) (i.e. change to input, turn on pullup)
-// The SCL may not become HIGH output. Therefore the pin is first set to input,
-// after that, a pullup resistor is switched on if needed.
+// set SCL high and to input (releases pin)
 #define i2c_scl_hi()              \
-  *_sclDirReg &= ~_sclBitMask;    \
-  if(_pullups) { *_sclPortReg |= _sclBitMask; }
+{ \
+  if (_sda_val) *_i2c_cr = _cr_sda_hi_scl_hi; \
+  else *_i2c_cr = _cr_sda_lo_scl_hi; \
+  _scl_val = true; \
+}
 
 
 // Read the bit value of the pin
 // Note that is the pin can also be read when it is an output.
-#define i2c_sda_read()   ((uint8_t) (*_sdaPinReg & _sdaBitMask) ? 1 : 0)
-#define i2c_scl_read()   ((uint8_t) (*_sclPinReg & _sclBitMask) ? 1 : 0)
+#define i2c_sda_read()   ((*_i2c_idr & _idr_sda_mask) ? 1 : 0)
+#define i2c_scl_read()   ((*_i2c_idr & _idr_scl_mask) ? 1 : 0)
+
+static void i2c_bad_pins()
+{
+  // hang if sda and scl pins do not have same idr and cr
+  while(1); // error
+}
 
+void SoftwareWire::i2c_bitbang()
+{
+  // Turn Arduino pin numbers into bit masks and io register addresses
+  uint8_t sda_group = (_sdaPin&0xf0)>>4;
+  uint8_t sda_pin = _sdaPin&0x0f;
+
+  uint16_t *sda_idr = NULL;
+  uint32_t *sda_cr = NULL;
+  uint32_t sda_cr_mask;
+  uint32_t sda_cr_in;
+  uint32_t sda_cr_out;
+
+  if (sda_pin < 0x08) {
+    sda_cr = (uint32_t*)&gpio_group[sda_group]->CRL;
+    sda_cr_mask = ~(0x0000000f << (sda_pin*4));
+    sda_cr_in = (((uint32)GPI|(uint32)GPI_FLOATING_IN) << (sda_pin*4));
+    sda_cr_out = (((uint32)GPO|(uint32)GPO_OPEN_DTAIN) << (sda_pin*4));
+  } else {
+    sda_cr = (uint32_t*)&gpio_group[sda_group]->CRH;
+    sda_cr_mask = ~(0x0000000f << ((sda_pin-8)*4));
+    sda_cr_in = (((uint32)GPI|(uint32)GPI_FLOATING_IN) << ((sda_pin-8)*4));
+    sda_cr_out = (((uint32)GPO|(uint32)GPO_OPEN_DTAIN) << ((sda_pin-8)*4));
+  }
+
+  _idr_sda_mask = ((uint16_t)0x0001) << sda_pin;
+  sda_idr     = (uint16_t*)&gpio_group[sda_group]->IDR;
+
+  uint8_t scl_group = (_sclPin&0xf0)>>4;
+  uint8_t scl_pin = _sclPin&0x0f;
+
+  uint16_t *scl_idr = NULL;
+  uint32_t *scl_cr = NULL;
+  uint32_t scl_cr_mask;
+  uint32_t scl_cr_in;
+  uint32_t scl_cr_out;
+
+  if (scl_pin < 0x08) {
+    scl_cr = (uint32_t*)&gpio_group[scl_group]->CRL;
+    scl_cr_mask = ~(0x0000000f << (scl_pin*4));
+    scl_cr_in = (((uint32)GPI|(uint32)GPI_FLOATING_IN) << (scl_pin*4));
+    scl_cr_out = (((uint32)GPO|(uint32)GPO_OPEN_DTAIN) << (scl_pin*4));
+  } else {
+    scl_cr = (uint32_t*)&gpio_group[scl_group]->CRH;
+    scl_cr_mask = ~(0x0000000f << ((scl_pin-8)*4));
+    scl_cr_in = (((uint32)GPI|(uint32)GPI_FLOATING_IN) << ((scl_pin-8)*4));
+    scl_cr_out = (((uint32)GPO|(uint32)GPO_OPEN_DTAIN) << ((scl_pin-8)*4));
+  }
+
+  _idr_scl_mask = ((uint16_t)0x0001) << scl_pin;
+  scl_idr     = (uint16_t*)&gpio_group[scl_group]->IDR;
+
+  // i2c pins sda and scl have to be same io bank, same cr register
+  if ((scl_cr != sda_cr) || (sda_idr != scl_idr)) i2c_bad_pins(); // error
+
+  _i2c_idr = sda_idr;
+  _i2c_cr = sda_cr;
+
+  uint32_t cr_val = *_i2c_cr & sda_cr_mask & scl_cr_mask;
+
+  _cr_sda_lo_scl_lo = cr_val | sda_cr_out | scl_cr_out;
+  _cr_sda_lo_scl_hi = cr_val | sda_cr_out | scl_cr_in;
+  _cr_sda_hi_scl_lo = cr_val | sda_cr_in  | scl_cr_out;
+  _cr_sda_hi_scl_hi = cr_val | sda_cr_in  | scl_cr_in;
+}
 
 //
 // Constructor
@@ -116,27 +204,18 @@
   _pullups = pullups;
   _stretch = detectClockStretch;
 
-  setClock( 100000UL);       // set default 100kHz
+  setClock( 40000UL);       // set default 40kHz
+
+  // switch on gpio clocks, set pins to high (= input)
+  gpio_init((PIN_enum)_sdaPin, GPI, 0, GPI_FLOATING_IN);
+  gpio_init((PIN_enum)_sclPin, GPI, 0, GPI_FLOATING_IN);
+  _sda_val = true;
+  _scl_val = true;
 
   // Set default timeout to 1000 ms.
   // 1 second is very long, 10ms would be more appropriate.
   // However, the Arduino libraries use often a default timeout of 1 second.
-  setTimeout( 1000L);
-
-  // Turn Arduino pin numbers into PORTx, DDRx, and PINx
-  uint8_t port;
-
-  port = digitalPinToPort(_sdaPin);
-  _sdaBitMask  = digitalPinToBitMask(_sdaPin);
-  _sdaPortReg  = portOutputRegister(port);
-  _sdaDirReg   = portModeRegister(port);
-  _sdaPinReg   = portInputRegister(port);      // PinReg is the input register, not the Arduino pin.
-
-  port = digitalPinToPort(_sclPin);
-  _sclBitMask  = digitalPinToBitMask(_sclPin);
-  _sclPortReg  = portOutputRegister(port);
-  _sclDirReg   = portModeRegister(port);
-  _sclPinReg   = portInputRegister(port);
+  setTimeout( 20L);
 }
 
 
@@ -184,6 +263,8 @@
   // are used, and the signals were just now turned high with i2c_init().
   if( _pullups)
     delay(2);           // 1ms didn't always work.
+
+  i2c_bitbang(); // calculate bit bang masks and registers
 }
 
 //
@@ -421,28 +502,8 @@
 //
 void SoftwareWire::setClock(uint32_t clock)
 {
-  // Tested values with an earlier version of this library.
-  //   Value 0 is without delay, the result depends on the microcontroller and the cpu clock.
-  //   0=maxspeed=140kHz (tested on 328P@16MHz)
-  //   1=120kHz
-  //   2=100kHz (default)
-  //   7=50kHz
-  //   47=10kHz
-  //   97=5kHz
-  //   500=1kHz
-  //   5000=100Hz
-  //   16383=minspeed=30Hz  - delayMicroseconds() max value reference arduino
-  //
-
-  // The _i2cdelay is an uint16_t
-  _i2cdelay = ( (F_CPU / 32L) / clock );               // The delay in microseconds, '32' is for this code.
-  unsigned int delayByCode = (F_CPU / 5000000L);       // Add some delay for the code, just a guess
-
-  if( _i2cdelay > delayByCode)
-    _i2cdelay -= delayByCode;
-  else
-    _i2cdelay = 0;
-
+   if (clock >= 50000) _i2cdelay = 0;
+   else _i2cdelay = 2;
 }
 
 
@@ -474,7 +535,7 @@
   Ser.println(F("SoftwareWire Status"));
   Ser.println(F("-------------------"));
   Ser.print(F("  F_CPU = "));
-  Ser.println(F_CPU);
+  Ser.println(SystemCoreClock);
   Ser.print(F("  sizeof(SoftwareWire) = "));
   Ser.println(sizeof(SoftwareWire));
   Ser.print(F("  _transmission status = "));
@@ -511,26 +572,29 @@
   }
   Ser.println();
 
-  Ser.print(F("  _sdaPin = "));
-  Ser.println(_sdaPin);
-  Ser.print(F("  _sclPin = "));
-  Ser.println(_sclPin);
-  Ser.print(F("  _sdaBitMask = 0x"));
-  Ser.println(_sdaBitMask, HEX);
-  Ser.print(F("  _sclBitMask = 0x"));
-  Ser.println(_sclBitMask, HEX);
-  Ser.print(F("  _sdaPortReg = "));
-  Ser.println( (uint16_t) _sdaPortReg, HEX);
-  Ser.print(F("  _sclPortReg = "));
-  Ser.println( (uint16_t) _sclPortReg, HEX);
-  Ser.print(F("  _sdaDirReg = "));
-  Ser.println( (uint16_t) _sdaDirReg, HEX);
-  Ser.print(F("  _sclDirReg = "));
-  Ser.println( (uint16_t) _sclDirReg, HEX);
-  Ser.print(F("  _sdaPinReg = "));
-  Ser.println( (uint16_t) _sdaPinReg, HEX);
-  Ser.print(F("  _sclPinReg = "));
-  Ser.println( (uint16_t) _sclPinReg, HEX);
+  Ser.print(F("  _sdaPin = 0x"));
+  Ser.println( (uint32_t) _sdaPin, HEX);
+  Ser.print(F("  _sclPin = 0x"));
+  Ser.println( (uint32_t) _sclPin, HEX);
+
+  Ser.print(F("  _i2c_idr = 0x"));
+  Ser.println( (uint32_t) _i2c_idr, HEX);
+  Ser.print(F("  _idr_sda_mask = 0x"));
+  Ser.println( (uint32_t) _idr_sda_mask, HEX);
+  Ser.print(F("  _idr_scl_mask = 0x"));
+  Ser.println( (uint32_t) _idr_scl_mask, HEX);
+
+  Ser.print(F("  _i2c_cr = 0x"));
+  Ser.println( (uint32_t) _i2c_cr, HEX);
+
+  Ser.print(F("  _cr_sda_lo_scl_lo = 0x"));
+  Ser.println( (uint32_t) _cr_sda_lo_scl_lo, HEX);
+  Ser.print(F("  _cr_sda_lo_scl_hi = 0x"));
+  Ser.println( (uint32_t) _cr_sda_lo_scl_hi, HEX);
+  Ser.print(F("  _cr_sda_hi_scl_lo = 0x"));
+  Ser.println( (uint32_t) _cr_sda_hi_scl_lo, HEX);
+  Ser.print(F("  _cr_sda_hi_scl_hi = 0x"));
+  Ser.println( (uint32_t) _cr_sda_hi_scl_hi, HEX);
 
   Ser.print(F("  line state sda = "));
   Ser.println(i2c_sda_read());
@@ -568,7 +632,7 @@
     }
     else if (error==4)
     {
-      Ser.print("  Unknow error at address 0x");
+      Ser.print("  Unknown error at address 0x");
       if (address<16)
         Ser.print("0");
       Ser.println(address,HEX);
@@ -603,8 +667,7 @@
     i2c_sda_hi();
   }
 
-  if (_i2cdelay != 0)               // This delay is not needed, but it makes it safer
-    delayMicroseconds(_i2cdelay);   // This delay is not needed, but it makes it safer
+  delayMicroseconds(1);             // i2c spec says "250ns data set-up time" (NXP UM10204, table 11)
 
   i2c_scl_hi();                     // clock high: the Slave will read the sda signal
 
diff -urN ORIG/SoftwareWire/SoftwareWire.h NEW/SoftwareWire/SoftwareWire.h
--- ORIG/SoftwareWire/SoftwareWire.h	2022-07-19 12:41:55.556816618 +0200
+++ NEW/SoftwareWire/SoftwareWire.h	2022-07-19 19:00:39.532456658 +0200
@@ -52,15 +52,18 @@
 
   uint8_t _sdaPin;
   uint8_t _sclPin;
-  uint8_t _sdaBitMask;
-  uint8_t _sclBitMask;
 
-  volatile uint8_t *_sdaPortReg;
-  volatile uint8_t *_sclPortReg;
-  volatile uint8_t *_sdaDirReg;
-  volatile uint8_t *_sclDirReg;
-  volatile uint8_t *_sdaPinReg;
-  volatile uint8_t *_sclPinReg;
+  bool _sda_val;                 // current sda value
+  bool _scl_val;                 // current scl value
+
+  volatile uint16_t *_i2c_idr;   // Input Data Register IDR
+  uint16_t _idr_sda_mask;        // IDR bitmask for sda
+  uint16_t _idr_scl_mask;        // IDR bitmask for scl
+  volatile uint32_t *_i2c_cr;    // Control Register Low CRL or Control Register High CRH
+  uint32_t _cr_sda_lo_scl_lo;    // CRL/CRH value for sda = 0 scl = 0
+  uint32_t _cr_sda_lo_scl_hi;    // CRL/CRH value for sda = 0 scl = 1
+  uint32_t _cr_sda_hi_scl_lo;    // CRL/CRH value for sda = 1 scl = 0
+  uint32_t _cr_sda_hi_scl_hi;    // CRL/CRH value for sda = 1 scl = 1
 
   uint8_t _transmission;      // transmission status, returned by endTransmission(). 0 is no error.
   uint16_t _i2cdelay;         // delay in micro seconds for sda and scl bits.
@@ -74,6 +77,7 @@
 
   // private methods
 
+  void i2c_bitbang();
   void i2c_writebit( uint8_t c );
   uint8_t i2c_readbit(void);
   void i2c_init(void);
